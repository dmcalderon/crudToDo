"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const agent_1 = require("../../app/agent");
const creation_1 = require("../fixtures/creation");
const updates_1 = require("../fixtures/updates");
describe("MongooseAdapter", () => {
    let Agent;
    before(() => {
        return agent_1.default.then((A) => { Agent = A; });
    });
    describe("Fetching", () => {
        it("should show virtuals in the response", () => {
            return Agent.request("GET", "/organizations")
                .then(resp => {
                chai_1.expect(resp.body.data.every(resource => resource.attributes.virtualName.endsWith(' (virtualized)'))).to.be.true;
            });
        });
    });
    describe.skip("Deletion", () => { });
    describe("Creation", () => {
        let createdResource;
        before(() => {
            return Agent.request("POST", "/organizations")
                .type("application/vnd.api+json")
                .send({ "data": creation_1.VALID_ORG_RESOURCE_NO_ID })
                .then((response) => {
                createdResource = response.body.data;
            }, (e) => {
                console.log(e, e.response.body);
            });
        });
        it("should run setters on create", () => {
            chai_1.expect(createdResource.attributes.name).to.equal(creation_1.VALID_ORG_RESOURCE_NO_ID.attributes.name.toUpperCase());
            chai_1.expect(createdResource.attributes.echo).to.equal(creation_1.VALID_ORG_RESOURCE_NO_ID.attributes.echo);
        });
        it("should show virtuals in the returned resource", () => {
            chai_1.expect(createdResource.attributes.virtualName).to.equal(creation_1.VALID_ORG_RESOURCE_NO_ID.attributes.name.toUpperCase() + ' (virtualized)');
            chai_1.expect(createdResource.attributes.reversed).to.equal(creation_1.VALID_ORG_RESOURCE_NO_ID.attributes.echo.split("").reverse().join(""));
        });
        it("should apply schema defaults", () => {
            chai_1.expect(createdResource.attributes.neverSet).to.equal("set from mongoose default");
        });
        it("should not allow setting internal fields as attributes", () => {
            const makeSetInternalFieldRequest = (k, v, inRelationships) => {
                const spreadData = inRelationships
                    ? {
                        relationships: Object.assign({}, creation_1.VALID_ORG_RESOURCE_NO_ID.relationships, { [k]: { data: v } })
                    }
                    : {
                        attributes: Object.assign({}, creation_1.VALID_ORG_RESOURCE_NO_ID.attributes, { [k]: v })
                    };
                return Agent.request("POST", "/organizations")
                    .type("application/vnd.api+json")
                    .send({ "data": Object.assign({}, creation_1.VALID_ORG_RESOURCE_NO_ID, spreadData) })
                    .then((response) => {
                    throw new Error("Should not run!");
                }, (e) => {
                    chai_1.expect(e.status).to.equal(400);
                    chai_1.expect([
                        "https://jsonapi.js.org/errors/illegal-field-name",
                        "https://jsonapi.js.org/errors/invalid-linkage-json"
                    ]).to.include(e.response.body.errors[0].code);
                });
            };
            return Promise.all([
                makeSetInternalFieldRequest("__t", "School", false),
                makeSetInternalFieldRequest("__v", 3, false),
                makeSetInternalFieldRequest("__t", "School", true),
                makeSetInternalFieldRequest("__v", 3, true),
                makeSetInternalFieldRequest("__t", { "type": "organizations", id: "School" }, true),
                makeSetInternalFieldRequest("__v", { "type": "organizations", id: 3 }, true),
            ]);
        });
    });
    describe("Updating", () => {
        let res;
        before(() => {
            return Agent.request("PATCH", `/organizations/${updates_1.VALID_ORG_VIRTUAL_PATCH.id}`)
                .type("application/vnd.api+json")
                .send({ "data": updates_1.VALID_ORG_VIRTUAL_PATCH })
                .then((response) => {
                res = response.body.data;
            });
        });
        it("should invoke setters on virtual, updated attributes", () => {
            chai_1.expect(res.attributes.echo).to.be.equal(updates_1.VALID_ORG_VIRTUAL_PATCH.attributes.echo);
            chai_1.expect(res.attributes.reversed).to.be.equal(updates_1.VALID_ORG_VIRTUAL_PATCH.attributes.echo.split("").reverse().join(""));
        });
        it("should invoke setters on non-virtual updated attributes", () => {
            chai_1.expect(res.attributes.name).to.equal("CHANGED NAME");
        });
        it("should not allow setting internal fields", () => {
            const makeSetInternalFieldRequest = (k, v, inRelationships) => {
                const spreadData = inRelationships
                    ? {
                        relationships: Object.assign({}, creation_1.VALID_ORG_RESOURCE_NO_ID.relationships, { [k]: { data: v } })
                    }
                    : {
                        attributes: Object.assign({}, creation_1.VALID_ORG_RESOURCE_NO_ID.attributes, { [k]: v })
                    };
                return Agent.request("PATCH", `/organizations/${updates_1.VALID_ORG_VIRTUAL_PATCH.id}`)
                    .type("application/vnd.api+json")
                    .send({
                    "data": Object.assign({ type: "organizations", id: updates_1.VALID_ORG_VIRTUAL_PATCH.id }, spreadData)
                })
                    .then((response) => {
                    throw new Error("Should not run!");
                }, (e) => {
                    chai_1.expect(e.status).to.equal(400);
                    chai_1.expect([
                        "https://jsonapi.js.org/errors/illegal-field-name",
                        "https://jsonapi.js.org/errors/invalid-linkage-json"
                    ]).to.include(e.response.body.errors[0].code);
                });
            };
            return Promise.all([
                makeSetInternalFieldRequest("__t", "School", false),
                makeSetInternalFieldRequest("__v", 3, false),
                makeSetInternalFieldRequest("__t", "School", true),
                makeSetInternalFieldRequest("__v", 3, true),
                makeSetInternalFieldRequest("__t", { "type": "organizations", id: "School" }, true),
                makeSetInternalFieldRequest("__v", { "type": "organizations", id: 3 }, true),
            ]);
        });
    });
});
