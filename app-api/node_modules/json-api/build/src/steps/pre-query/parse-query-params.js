"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const R = require("ramda");
const Errors = require("../../util/errors");
const json_api_1 = require("../../util/json-api");
const misc_1 = require("../../util/misc");
function default_1(params) {
    const paramsToParserFns = {
        include: R.partial(parseCommaSeparatedParamString, ["include"]),
        sort: R.pipe(R.partial(parseCommaSeparatedParamString, ["sort"]), R.map(parseSortField)),
        page: R.pipe(R.partial(parseScopedParam, ["page"]), R.mapObjIndexed((it, scopeName) => {
            const asNumber = parseInt(String(it), 10);
            if (String(asNumber) !== String(it)) {
                throw Errors.invalidQueryParamValue({
                    detail: "Expected a numeric integer value",
                    source: { parameter: `page[${scopeName}]` }
                });
            }
            return asNumber;
        })),
        fields: parseFieldsParam
    };
    return R.mapObjIndexed((v, paramName) => {
        return !R.has(paramName, paramsToParserFns)
            ? v
            : paramsToParserFns[paramName](v);
    }, params);
}
exports.default = default_1;
const isScopedParam = R.is(Object);
const isValidFieldName = R.allPass([
    (it) => !["id", "type"].includes(it),
    json_api_1.isValidMemberName
]);
function parseFieldsParam(fieldsParam) {
    if (!isScopedParam(fieldsParam))
        throw Errors.invalidQueryParamValue({
            source: { parameter: "fields" }
        });
    return R.mapObjIndexed(R.pipe(((v, k) => parseCommaSeparatedParamString(`fields[${k}]`, v)), R.filter(isValidFieldName)), fieldsParam);
}
function parseScopedParam(paramName, scopedParam) {
    if (!isScopedParam(scopedParam))
        throw Errors.invalidQueryParamValue({
            source: { parameter: paramName }
        });
    return scopedParam;
}
function parseCommaSeparatedParamString(paramName, encodedString) {
    if (typeof encodedString !== 'string')
        throw Errors.invalidQueryParamValue({
            detail: "Expected a comma-separated list of strings.",
            source: { parameter: paramName }
        });
    return encodedString.split(",").map(decodeURIComponent);
}
function parseSortField(sortField) {
    const fieldName = misc_1.stripLeadingBMPChar("-")(sortField);
    if (!json_api_1.isValidMemberName(fieldName)) {
        throw Errors.invalidQueryParamValue({
            detail: `Tried to sort on illegal field name ${fieldName}.`,
            source: { parameter: "sort" }
        });
    }
    return {
        field: fieldName,
        direction: sortField.startsWith("-") ? "DESC" : "ASC"
    };
}
